install.packages("swirl")
packageVersion("swirl")
library(swirl)
install_from_swirl("Statistical Inference")
swirl()
rexp(40, 0.2)
rexp(40, 0.2)
set.seed(1337)
rexp(40, 0.2)
rexp(40, 0.2)
rexp(40, 0.2)
mean(rexp(40, 0.2))
s <- c(s,mean(rexp(40, 0.2)))
s = NULL
s <- c(s,mean(rexp(40, 0.2)))
s
for (i in 1 : 10)  s <- c(s,mean(rexp(40, 0.2)))
s
for (i in 1 : 2)  s <- c(s,mean(rexp(40, 0.2)))
s
s = NULL
for (i in 1 : 2)  s <- c(s,mean(rexp(40, 0.2)))
s
s = NULL
for (i in 1 : 1000)  s <- c(s,mean(rexp(40, 0.2)))
mean(s)
0.2^-1
a <- mean(s)
b <- 0.2^-1
abs(a-b)
library(ggplot2)
ggplot(data.frame(y=simMeans), aes(x=y)) +
geom_histogram(aes(y=..density..), binwidth=0.2, fill="#0072B2",
color="black") +
stat_function(fun=dnorm, arg=list(mean=lambda^-1,
sd=(lambda*sqrt(exponentials))^-1),
size=2) +
labs(title="Plot of the Simulations", x="Simulation Mean")
ggplot(data.frame(y=simMeans), aes(x=y)) +
geom_histogram(aes(y=..density..), binwidth=0.2, fill="#0072B2",
color="black") +
stat_function(fun=dnorm, arg=list(mean=lambda^-1,
sd=(lambda*sqrt(exponentials))^-1),
size=2) +
labs(title="Plot of the Simulations", x="Simulation Mean")
simMeans
ECHO=TRUE
set.seed(1337)
lambda = 0.2
exponentials = 40
simMeans = NULL
for (i in 1 : 1000) simMeans = c(simMeans, mean(rexp(exponentials, lambda)))
mean(simMeans)
lambda^-1
abs(mean(simMeans)-lambda^-1)
var(simMeans)
(lambda * sqrt(n))^-2.
(lambda * sqrt(exponentials))^-2
abs(var(simMeans)-(lambda * sqrt(exponentials))^-2)
library(ggplot2)
ggplot(data.frame(y=simMeans), aes(x=y)) +
geom_histogram(aes(y=..density..), binwidth=0.2, fill="#0072B2",
color="black") +
stat_function(fun=dnorm, arg=list(mean=lambda^-1,
sd=(lambda*sqrt(exponentials))^-1),
size=2) +
labs(title="Plot of the Simulations", x="Simulation Mean")
library(ggplot2)
ggplot(data.frame(y=simMeans), aes(x=y)) +
geom_histogram(aes(y=..density..), binwidth=0.2, fill="#0072B2",
color="black") +
stat_function(fun=dnorm, args=list(mean=lambda^-1,
sd=(lambda*sqrt(exponentials))^-1),
size=2) +
labs(title="Plot of the Simulations", x="Simulation Mean")
install('Tex')
instal('Tex')
install.packages('Tex')
install.packages('tex')
install.packages('MiKTteX')
install.packages('TEXmaker')
install.packages('LaTeX')
file.exists(Sys.which('texi2dvi'))
Sys.which('texi2dvi')
install.packages('texi2dvi')
.rs.is_tex_installed()
rs.is_tex_installed()
file.exists(Sys.which('texi2dvi'))
install.packages('upquote')
install.packages('upquote')
library(swirl)
swirl()
swirl()
install_from_swirl("Regression Models")
swirl()
plot(child ~ parent, galton)
plot(jitter(child,4) ~ parent,galton)
lm(child ~ parent, galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd=3, col='red')
summary(regrline)
lm(parent~child)
lm()
fit <- lm (parent ~ child,data = galton)
fit <- lm(child ~ parent, galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
fit$coef[1]
ols.ic <- fit$coef[1]
ols.slope <- fit$coef
ols.slope <- fit$coef[2]
info()
skip()
all.equal(lhs,rhs)
var(dalton$child)
var()
info()
skip()
varRes <- var(fit$residuals)
varEst
varEst <- varRes
varEst <- var(est(ols.slope, ols.ic))
all.equal(lhs,rhs)
varEst <- var(est(ols.slope, ols.ic))
all.equal(varChild,varEst+varRes)
efit <- lm(accel ~ mag+dist,attenu)
man(efit)
mean(efit)
mean(residuals)
mean(efit$residuals)
cov(predictor,attenu$mag)
cov(attenu$mag,attenu$mag)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
cor(x,y)
cor(gpa_nor,gch_nor)
lm(gpa_nor,gch_nor)
lm(x,y)
lm()
lm(gpa_nor,gch_nor,data=galton)
lnor <- gap_nor
lnor <- gpa_nor
l_nor <- lm(gch_nor ~ gpa_nor)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
weighted.mean(x, w)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y ~  x)$coeff
lm(y ~ 0 + x)$coeff
lm(y ~ 0 + x ~ 0)$coeff
lm(y + x ~ 0)$coeff
x <- rnom(10)
x <- rand(10)
x <- rnorm(10)
x
x <- rnorm(10,2)
x
y <- rnorm(10,10)
y
mean(x)
mean(y)
sd(x)
sd(y)
lm(x,y)
cov(x,y)
cov(x,y)/s(x)s(y)
cov(x,y)/s(x)*s(y)
cov(x,y)/sd(x)*sd(y)
plot(x,y)
sy <- sd(y)
sx <- sd(x)
plot(sx)
plot(sx,sy)
plot(x,y)
lm(x~y)
lm(y~x)
sfit <- lm(y~x)
predict(sfit,newdata = x(0.88,1.34,2.1))
predict(sfit,newdata = c(0.88,1.34,2.1))
predict(sfit,newdata = data.frame(x=newx))
newx <- c(0.81,1.23,2.33)
predict(sfit,newdata = data.frame(x=newx))
resid(sfit)
cls
cls()
library(swirl)
swirl)
swirl())
swirl()
fit <- lm(child ~ parent,dataset='galton')
galton
head(galton)
fit <- lm(child ~ parent, galton)
n
sqrt(sum(fit$residuals^2) / (n - 2))
summary(fit)$sigma
sqrt(deviance(fit)/(n-2))
mu<-mean(Child)
mu<-mean(galton$Child)
mu <- mean(galton$child)
sum((mu-galton$child)^2)
sTot <- sum((galton$child-mu)^2)
n
sRes <- deviance(fit)
sRes/sTot
1-sRes/sTot
summary(fit)$r.squared
n
cor(galton$parent,galton$child)
cor(galton$parent,galton$child)^2
ones <- rep(1, nrow(galton))
ones
lm(child ~ ones + parent -1, galton)
swirl()
Karthik Kalimuthu
x <- c(2,2)
x
x
x
install.packages('UsingR')
q()
install.packages('DDPQuiz3')
setwd("C:/Karthik/SData_Science/Developing Data Products/Assgn/Data_Products")
shiny::runApp()
install.packages('rsconnect')
install.packages("rsconnect")
devtools::install_github('rstudio/shinyapps')
devtools::install_github('rstudio/shinyapps')
devtools::install_github('rstudio/shinyapps')
library('shiny')
library(shinyapps)
install.packages("shinyapps")
devtools::install_github('rstudio/shinyapps')
